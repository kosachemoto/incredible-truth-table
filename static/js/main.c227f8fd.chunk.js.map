{"version":3,"sources":["components/button/button.component.jsx","components/input/input.component.jsx","components/table/table.component.jsx","components/table-body/table-body.component.jsx","components/table-header/table-header.component.jsx","containers/app/app.container.jsx","containers/input-form/input-form.container.jsx","services/expression/expression.service.js","containers/data-grid/data-grid.container.jsx","serviceWorker.js","index.js"],"names":["ButtonComponent","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","Fragment","className","onClick","props","React","Component","InputComponent","tabIndex","type","data","onChange","onKeyDown","TableComponent","table_header_component_TableHeaderComponent","header","table_body_component_TableBodyComponent","body","TableBodyComponent","map","rowData","index","element","toString","TableHeaderComponent","AppContainer","_this","call","state","expression","onInputFormChange","bind","assertThisInitialized","inputValue","setState","input_form_container_InputFormContainer","data_grid_container_DataGridContainer","InputFormContainer","onButtonClick","onInputChange","event","keyCode","target","input_component_InputComponent","button_component_ButtonComponent","ExpressionService","split","filter","self","indexOf","varCount","position","padStart","Boolean","variables","parse","Function","toConsumableArray","concat","DataGridContainer","exec","execFunctionBy","length","sourceDataCount","Math","pow","tBodyData","i","sourceData","sourceDataValues","row","push","generateTableBody","table_component_TableComponent","window","location","hostname","match","ReactDOM","render","app_container_AppContainer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c227f8fd.chunk.js","sourcesContent":["import React from 'react';\nimport './button.component.css';\n\nexport class ButtonComponent extends React.Component {\n  render() {\n    return (\n      <>\n        <button className=\"button__button\" onClick={this.props.onClick}>Click me</button>\n      </>\n    )\n  }\n}","import React from 'react';\nimport './input.component.css';\n\nexport class InputComponent extends React.Component {\n  render() {\n    return (\n      <div className=\"input\">\n        <input className=\"input__input\" tabIndex=\"0\" type=\"text\" value={this.props.data} onChange={this.props.onChange} onKeyDown={this.props.onKeyDown} />\n      </div>\n    )\n  }\n}","import React from 'react';\n\nimport { TableHeaderComponent } from './../../components';\nimport { TableBodyComponent } from './../../components';\n\nimport './table.component.css';\n\nexport class TableComponent extends React.Component {\n  render() {\n    return (\n      <table className=\"table\">\n        <TableHeaderComponent data={this.props.header} />\n        <TableBodyComponent data={this.props.body} />\n      </table>\n    )\n  }\n}","import React from 'react';\nimport './table-body.component.css';\n\nexport class TableBodyComponent extends React.Component {\n  render() {\n    return (\n      <tbody className=\"table-body\">\n        { this.props.data.map((rowData, index) => (\n          <tr key={index}>\n            { rowData.map((element, index) => (\n              <td key={index} className={element ? \"table-body__cell color-true\" : \"table-body__cell color-false\"}>{ element.toString() }</td>\n            )) }\n          </tr>\n        )) }\n      </tbody>\n    )\n  }\n}","import React from 'react';\nimport './table-header.component.css';\n\nexport class TableHeaderComponent extends React.Component {\n  render() {\n    return (\n      <thead className=\"table-header\">\n        <tr>\n          { this.props.data.map((element, index) => (\n            <td key={index} className=\"table-header__cell\">{ element }</td>\n          )) }\n        </tr>\n      </thead>\n    )\n  }\n}","import React from 'react';\n\nimport { VariablesListComponent } from './../../components';\nimport { DataTableComponent } from './../../components';\n\nimport { InputFormContainer } from './../../containers';\nimport { DataGridContainer } from './../../containers';\n\nimport './app.container.css';\n\nexport class AppContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expression: \"\"\n    }\n\n    this.onInputFormChange = this.onInputFormChange.bind(this);\n  }\n\n  onInputFormChange(inputValue) {\n    this.setState({\n      expression: inputValue\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"app-component\">\n        <h1 className=\"app-header\">Incredible Truth Table</h1>\n        <InputFormContainer onChange={this.onInputFormChange} />\n        <DataGridContainer expression={this.state.expression} />\n      </div>\n    )\n  }\n}","import React from 'react';\nimport { InputComponent } from './../../components';\nimport { ButtonComponent } from './../../components';\nimport './input-form.container.css';\n\nexport class InputFormContainer extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      expression: \"\"\n    }\n\n    this.onButtonClick = this.onButtonClick.bind(this);\n    this.onInputChange = this.onInputChange.bind(this);\n    this.onKeyDown = this.onKeyDown.bind(this);\n  }\n\n  onButtonClick() {\n    this.props.onChange(this.state.expression);\n  }\n\n  onKeyDown(event) {\n    event.keyCode === 13 && this.onButtonClick();\n  }\n\n  onInputChange(event) {\n    const inputValue = event.target.value;\n    this.setState({\n      expression: inputValue\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"input-form\">\n        <InputComponent data={this.expression} onChange={this.onInputChange} onKeyDown={this.onKeyDown} />\n        <ButtonComponent onClick={this.onButtonClick} />\n      </div>\n    )\n  }\n}","export class ExpressionService {\n  // Parse expression and retun all variables\n  static parse(expression) {\n    const regexp = /[\\s!&|()=<>]|\\btrue\\b|\\bfalse\\b|\\s/gi;\n    const variables = expression.split(regexp);\n\n    return variables.filter((element, index, self) => {\n        return element !== \"\" && self.indexOf(element) === index; \n      });\n  }\n  // Return set of values from `position` position \n  // and for truth table with `varCourn` variables\n  static sourceDataValues(varCount, position) {\n    return position\n      .toString(2)\n      .padStart(+varCount, \"0\")\n      .split(\"\")\n      .map(value => Boolean(+value))\n  }\n  // Return executable function by `expression`\n  // with appropriate count of variables-parameters\n  static execFunctionBy(expression) {\n    const variables = this.parse(expression);\n\n    return new Function([...variables], `return ${expression}`);\n  } \n}","import React from 'react';\n\nimport { TableComponent } from './../../components';\n\nimport { ExpressionService } from './../../services';\n\nimport './data-grid.container.css';\n\nexport class DataGridContainer extends React.Component {\n  generateTableBody(expression) {\n    const variables = ExpressionService.parse(expression);\n    const exec = ExpressionService.execFunctionBy(expression);\n\n    const length = variables.length;\n    const sourceDataCount = length ? Math.pow(2, length) : 0;\n    const tBodyData = []; // Mutable\n\n    for (let i = 0; i < sourceDataCount; i++) {\n      const sourceData = ExpressionService.sourceDataValues(length, i);\n      const row = [...sourceData, exec(...sourceData)];\n      tBodyData.push(row);\n    }\n\n    return tBodyData;\n  }\n\n  render() {\n    const expression = this.props.expression;\n    const variables = ExpressionService.parse(expression);\n\n    const header = variables.length ? [...variables, expression] : [];\n    const body = this.generateTableBody(expression);\n\n    return (\n      <div className=\"data-grid\">\n        <TableComponent header={header} body={body} />\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { AppContainer } from './containers';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppContainer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}