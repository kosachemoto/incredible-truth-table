{"version":3,"sources":["components/edit/Edit.jsx","components/variableItem/VariableItem.jsx","components/variablesList/VariablesList.jsx","containers/app/App.jsx","serviceWorker.js","index.js"],"names":["Edit","react_default","a","createElement","className","type","value","this","props","data","onChange","Component","VariableItem","VariablesList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","console","log","map","variable","index","components_variableItem_VariableItem","key","App","state","dataString","variables","onEditChange","bind","assertThisInitialized","parseDataString","event","target","setState","_this2","split","filter","element","self","indexOf","components_edit_Edit","components_variablesList_VariablesList","Boolean","window","location","hostname","match","ReactDOM","render","containers_app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gUAaeA,0LARX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,MAAOC,KAAKC,MAAMC,KAAMC,SAAUH,KAAKC,MAAME,mBAJrDC,cCUJC,0LARX,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACZG,KAAKC,MAAMC,aAJOE,cCkBZE,qBAhBb,SAAAA,EAAYL,GAAO,IAAAM,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAR,KAAAM,GACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAR,KAAAQ,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAZ,KAAMC,IAENY,QAAQC,IAAI,iBAAkBb,GAHbM,wEAMjB,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACZG,KAAKC,MAAMC,KAAKa,IAAI,SAACC,EAAUC,GAAX,OACnBvB,EAAAC,EAAAC,cAACsB,EAAD,CAAcC,IAAKF,EAAOf,KAAMc,cAVdZ,cCmDbgB,qBAjDb,SAAAA,EAAYnB,GAAO,IAAAM,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAR,KAAAoB,IACjBb,EAAAC,OAAAE,EAAA,EAAAF,CAAAR,KAAAQ,OAAAG,EAAA,EAAAH,CAAAY,GAAAR,KAAAZ,KAAMC,KAEDoB,MAAQ,CACXC,WAAY,GACZC,UAAW,IAGbhB,EAAKiB,aAAejB,EAAKiB,aAAaC,KAAlBjB,OAAAkB,EAAA,EAAAlB,QAAAkB,EAAA,EAAAlB,CAAAD,KACpBA,EAAKoB,gBAAkBpB,EAAKoB,gBAAgBF,KAArBjB,OAAAkB,EAAA,EAAAlB,QAAAkB,EAAA,EAAAlB,CAAAD,KATNA,4EAYNqB,GACX,IAAM7B,EAAQ6B,EAAMC,OAAO9B,MAE3BC,KAAK8B,SAAS,CACZR,WAAYvB,EACZwB,UAAWvB,KAAK2B,gBAAgB5B,iDAIhB,IAAAgC,EAAA/B,KAClBA,KAAK8B,SAAS,SAAAT,GAAK,MAAK,CACtBE,UAAWQ,EAAKJ,gBAAgBN,EAAMC,uDAI1BA,GAQd,OALsBA,EAAWU,MAFlB,iBAGZC,OAAO,SAACC,EAASjB,EAAOkB,GACvB,MAAmB,KAAZD,GAAkBC,EAAKC,QAAQF,KAAajB,qCAOvD,OACEvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,0BACAH,EAAAC,EAAAC,cAACyC,EAAD,CAAMnC,KAAMF,KAAKqB,MAAMC,WAAYnB,SAAUH,KAAKwB,eAClD9B,EAAAC,EAAAC,cAAC0C,EAAD,CAAepC,KAAMF,KAAKqB,MAAME,oBA5CtBnB,cCOEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0ec2380b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Edit.css';\n\nclass Edit extends Component {\n  render() {\n    return (\n      <div className=\"edit-component\">\n        <input type=\"text\" value={this.props.data} onChange={this.props.onChange} />\n      </div>\n    );\n  }\n}\n\nexport default Edit;\n","import React, { Component } from 'react';\nimport './VariableItem.css';\n\nclass VariableItem extends Component {\n  render() {\n    return (\n      <div className=\"variable-item-component\">\n        {this.props.data}\n      </div>\n    );\n  }\n}\n\nexport default VariableItem;\n","import React, { Component } from 'react';\nimport VariableItem from './../variableItem';\nimport './VariablesList.css';\n\nclass VariablesList extends Component {\n  constructor(props) {\n    super(props);\n\n    console.log(\"varlist.props:\", props);\n  }\n  render() {\n    return (\n      <div className=\"variables-list-component\">\n        {this.props.data.map((variable, index) => (\n          <VariableItem key={index} data={variable} />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default VariablesList;\n","import React, { Component } from 'react';\nimport Edit from './../../components/edit';\nimport VariablesList from './../../components/variablesList';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dataString: \"\",\n      variables: []\n    }\n\n    this.onEditChange = this.onEditChange.bind(this);\n    this.parseDataString = this.parseDataString.bind(this);\n  }\n\n  onEditChange(event) {\n    const value = event.target.value;\n\n    this.setState({\n      dataString: value,\n      variables: this.parseDataString(value)\n    });\n  }\n\n  componentDidMount() {\n    this.setState(state => ({\n      variables: this.parseDataString(state.dataString)\n    }));\n  }\n\n  parseDataString(dataString) {\n    const regexp = /[\\s!&|()=<>]/g;\n    \n    const variablesList = dataString.split(regexp)\n      .filter((element, index, self) => {\n        return element !== \"\" && self.indexOf(element) === index; \n      });\n\n    return variablesList;\n  }\n\n  render() {\n    return (\n      <div className=\"app-component\">\n        <h1 className=\"app-header\">Incredible Truth Table</h1>\n        <Edit data={this.state.dataString} onChange={this.onEditChange} />\n        <VariablesList data={this.state.variables} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}